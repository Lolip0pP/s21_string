
#include <check.h>
#include <stdlib.h>
#include <string.h>
#include "s21_string.h"
#include "s21_sprintf.h"
#include <stdio.h>

#test s21_strerror_0
	for (int i = -10; i< 200; i++) {
		ck_assert_str_eq(s21_strerror(i), strerror(i));
		}
#test s21_strpbrk_0
	char str1[] = "hello world";
	char str2[] = "abcde";
	ck_assert_ptr_eq (s21_strpbrk(str1, str2), strpbrk(str1, str2));

#test s21_strpbrk_1
	char str1[] = "hello world";
	char str2[] = "o";
	ck_assert_ptr_eq (s21_strpbrk(str1, str2), strpbrk(str1, str2));

#test s21_strpbrk_2
	char str1[] = "hello world";
	char str2[] = ":(";
	ck_assert_ptr_eq (s21_strpbrk(str1, str2), strpbrk(str1, str2));

#test s21_strtok_0
	char str_0[] = "hello world ";
	char str_1[] = "hello world ";
	char delim[] = " ";
	ck_assert_str_eq (s21_strtok(str_0, delim), strtok(str_1, delim));
	ck_assert_str_eq (s21_strtok(NULL, delim), strtok(NULL, delim));

#test s21_strtok_2
	char str[] = "hello world hi";
	char str1[] = "hello world hi";
	const char str2[] = " ";
	char *token = s21_strtok(str, str2);
	char *token2 = strtok(str1, str2);
	ck_assert_str_eq(token, token2);
	while (token != NULL) {
		ck_assert_str_eq(token, token2);
		token = s21_strtok(NULL, str2);
		token2 = strtok(NULL, str2);
	}

#test s21_strtok_3
	char str_strtok1[] = "one/two/three(four)five";
	char delim1[] = "/()";

	char str_strtok2[] = "one/two/three(four)five";
	char delim2[] = "/()";
	char *my_strtok = s21_strtok(str_strtok1, delim1);
	char *origin_strtok = strtok(str_strtok2, delim2);
	while (my_strtok != s21_NULL) {
		ck_assert_str_eq(my_strtok, origin_strtok);
		my_strtok = s21_strtok(s21_NULL, delim1);
		origin_strtok = strtok(s21_NULL, delim2);
	}
  
#test s21_strtok_4
	char str_0[] = "";
	char str_1[] = "";
	char delim[] = " ";
	ck_assert_pstr_eq (s21_strtok(str_0, delim), strtok(str_1, delim));
	ck_assert_pstr_eq (s21_strtok(NULL, delim), strtok(NULL, delim));

#test s21_strlen_test_0
	char str[] = "123456789";
	ck_assert_uint_eq(s21_strlen(str), strlen(str));

#test s21_strlen_test_1
	char str[] = "";
	ck_assert_uint_eq(s21_strlen(str), strlen(str));

#test s21_strcspn_0
	char str1[] = "HORNEY_MAD";
	char str2[] = "RYGA";
	int res_str = strcspn(str1, str2);
	int res_s21str = s21_strcspn(str1, str2);
	ck_assert_int_eq(res_str, res_s21str);

#test s21_strcspn_1
	char str1[] = "";
	char str2[] = "RYGA";
	int res_str = strcspn(str1, str2);
	int res_s21str = s21_strcspn(str1, str2);
	ck_assert_int_eq(res_str, res_s21str);

#test s21_strcspn_2
	char str1[] = "HORNEY_\n\n\tMAD";
	char str2[] = "";
	int res_str = strcspn(str1, str2);
	int res_s21str = s21_strcspn(str1, str2);
	ck_assert_int_eq(res_str, res_s21str);

#test s21_strcspn_3
	char str1[] = "";
	char str2[] = "";
	int res_str = strcspn(str1, str2);
	int res_s21str = s21_strcspn(str1, str2);
	ck_assert_int_eq(res_str, res_s21str);

#test s21_strcspn_4
	char str1[] = "1234567890-----09876543234567890987654321Z";
	char str2[] = "X";
	int res_str = strcspn(str1, str2);
	int res_s21str = s21_strcspn(str1, str2);
	ck_assert_int_eq(res_str, res_s21str);

#test s21_strcspn_5
	char test1[] = "0123456789";
	char test2[] = "9876";
	char test3[] = "LOST: 4-8-15-16-23-42";
	char test4[] = "1234567890";
	char test5[] = "0/";
	char test6[] = "%%\\#";
	char test7[] = " ";
	char test8[] = "1234567890";
	ck_assert_uint_eq(s21_strcspn(test1, test2), strcspn(test1, test2));
	ck_assert_uint_eq(s21_strcspn(test3, test4), strcspn(test3, test4));
	ck_assert_uint_eq(s21_strcspn(test3, test5), strcspn(test3, test5));
	ck_assert_uint_eq(s21_strcspn(test3, test6), strcspn(test3, test6));
	ck_assert_uint_eq(s21_strcspn(test3, test7), strcspn(test3, test7));
	ck_assert_uint_eq(s21_strcspn(test4, test8), strcspn(test4, test8));
	ck_assert_uint_eq(s21_strcspn(test2, test7), strcspn(test2, test7));

#test s21_strrchr_0
  char test1[] = "0163456769";
  char test2[] = ";;;;;;H%%//#HH";
  char test3[] = "     /";
  ck_assert_uint_eq((unsigned long)s21_strrchr(test1, '6'),
                    (unsigned long)strrchr(test1, '6'));
  ck_assert_uint_eq((unsigned long)s21_strrchr(test1, ' '),
                    (unsigned long)strrchr(test1, ' '));
  ck_assert_uint_eq((unsigned long)s21_strrchr(test1, '6'),
                    (unsigned long)strrchr(test1, '6'));
  ck_assert_uint_eq((unsigned long)s21_strrchr(test2, 'H'),
                    (unsigned long)strrchr(test2, 'H'));
  ck_assert_uint_eq((unsigned long)s21_strrchr(test2, '$'),
                    (unsigned long)strrchr(test2, '$'));
  ck_assert_uint_eq((unsigned long)s21_strrchr(test2, ';'),
                    (unsigned long)strrchr(test2, ';'));
  ck_assert_uint_eq((unsigned long)s21_strrchr(test3, ' '),
                    (unsigned long)strrchr(test3, ' '));
  ck_assert_str_eq(s21_strrchr(test2, '\0'),
                    strrchr(test2, '\0'));

#test s21_strstr_0
	const char haystack[20] = "TutorialsPoint";
	const char needle[10] = "Point";
	char *res_str = strstr(haystack, needle);
	char *res_s21str = s21_strstr(haystack, needle);
	ck_assert_ptr_eq(res_str, res_s21str);

#test s21_strstr_1
	const char haystack[20] = "";
	const char needle[10] = "Point";
	char *res_str = strstr(haystack, needle);
	char *res_s21str = s21_strstr(haystack, needle);
	ck_assert_ptr_eq(res_str, res_s21str);

#test s21_strstr_2
	const char haystack[20] = "TutorialsPoint";
	const char needle[10] = "";
	char *res_str = strstr(haystack, needle);
	char *res_s21str = s21_strstr(haystack, needle);
	ck_assert_ptr_eq(res_str, res_s21str);

#test s21_strstr_3
	const char haystack[20] = "Tutor\n\n\n\talsPoint";
	const char needle[10] = "\n\n\n\t";
	//printf("%ld %ld\n", strlen(haystack), strlen(needle));
	char *res_str = strstr(haystack, needle);
	char *res_s21str = s21_strstr(haystack, needle);
	ck_assert_ptr_eq(res_str, res_s21str);

#test s21_strstr_4
	const char haystack[20] = "";
	const char needle[10] = "";
	char *res_str = strstr(haystack, needle);
	char *res_s21str = s21_strstr(haystack, needle);
	ck_assert_ptr_eq(res_str, res_s21str);

#test s21_strstr_5
	const char * tmpArg = NULL;
	const char needle[10] = "";

	char *res_str = strstr(tmpArg, needle);
	char *res_s21str = s21_strstr(tmpArg, needle);
	ck_assert_ptr_eq(res_str, res_s21str);

#test s21_memset_0
	char str[10] = "123456789";
	ck_assert_str_eq(memset(str, 'k', 3), s21_memset(str, 'k', 3));

#test s21_memset_1
	char str1[15] = "1234567890";
	char str2[15] = "5432167890";
	int c = 'q';
	int n = 10;
	s21_memset(str1, c, n);
	memset(str2, c, n);
	ck_assert_mem_eq(str1, str2, n);

#test s21_memset_2
	char str1[15] = "qweqweqweqwe";
	char str2[15] = "qweqweqweqwe";
	int c = '\0';
	int n = 5;
	s21_memset(str1, c, n);
	memset(str2, c, n);
	ck_assert_mem_eq(str1, str2, n);

#test s21_memset_3
	char str1[15] = "qweqweqweqwe";
	char str2[15] = "qweqweqweqwe";
	int c = '\n';
	int n = 5;
	s21_memset(str1, c, n);
	memset(str2, c, n);
	ck_assert_mem_eq(str1, str2, n);

	char s1[255] = "QWERTY";
	ck_assert_pstr_eq(memset(s1, 2, 6), s21_memset(s1, 2, 6));

#test s21_memset_4
	char str1[15] = "qweqweqweqwe";
	char str2[15] = "qweqweqweqwe";
	int c = ' ';
	int n = 5;
	s21_memset(str1, c, n);
	memset(str2, c, n);
	ck_assert_mem_eq(str1, str2, n);

#test s21memcmp_0
	ck_assert_int_eq(s21_memcmp("1234567", "2345", 5),
		               memcmp("1234567", "2345", 5));
	
	ck_assert_int_eq(s21_memcmp("", "", 0), memcmp("", "", 0));
	ck_assert_int_eq(s21_memcmp("12", "2", 1), memcmp("12", "2", 1));
	ck_assert_int_eq(s21_memcmp("12345", "", 0), memcmp("12345", "", 0));
	ck_assert_int_eq(s21_memcmp("12345", "1", 0), memcmp("12345", "1", 0));
	ck_assert_int_eq(s21_memcmp(" ", " ", 1), memcmp(" ", " ", 1));

#test s21_strncat_0
	char str_1[100] = "Hello";
	char str_2[100] = " World";
	ck_assert_str_eq(strncat(str_1, str_2, 3), s21_strncat(str_1, str_2, 3));

#test s21_strncat_1
	char str_1[100] = "\0";
	char str_2[100] = "l hjh jljjk";
	ck_assert_str_eq(strncat(str_1, str_2, 13), s21_strncat(str_1, str_2, 13));

#test s21_strncat_2
	char str_1[100] = "\n";
	char str_2[100] = "p-\0-roger";
	ck_assert_str_eq(strncat(str_1, str_2, 9), s21_strncat(str_1, str_2, 9));

#test s21_strncat_3
	char str_1[100] = "-\t-";
	char str_2[100] = "\0";
	ck_assert_str_eq(strncat(str_1, str_2, 2), s21_strncat(str_1, str_2, 2));

#test s21_strncat_4
	char str_1[100] = " \b";
	char str_2[100] = "  1 \n";
	ck_assert_str_eq(strncat(str_1, str_2, 5), s21_strncat(str_1, str_2, 5));

#test s21_strncat_5
	char str_1[100] = " 0 ";
	char str_2[100] = "123";
	ck_assert_str_eq(strncat(str_1, str_2, 0), s21_strncat(str_1, str_2, 0));

#test s21_strncat_6
	char str_1[100] = " 0 ";
	char str_2[100] = "qwer";
	ck_assert_str_eq(strncat(str_1, str_2, 0 + 2),
		                 s21_strncat(str_1, str_2, 0 + 2));

#test s21_strncat_7
	char str_1[100] = " 0 ";
	char str_2[100] = "error";
	ck_assert_str_eq(strncat(str_1, str_2, 4 - 1),
		                 s21_strncat(str_1, str_2, 4 - 1));

#test s21_strncat_8
	char str_1[100] = "999";
	char str_2[100] = "luckKK";
	ck_assert_str_eq(strncat(str_1, str_2, 2 * 2),
		                 s21_strncat(str_1, str_2, 2 * 2));

#test s21_strncat_9
	char s1[255] = "QWERTY";
	char s2[255] = "E";
	ck_assert_pstr_eq(strncat(s1, s2, 6), s21_strncat(s1, s2, 6));

#test s21_memchr_0
	char str[] = "abcdefg";
	void *ptr = s21_memchr(str, 'e', 7);
	ck_assert_ptr_eq(ptr, str + 4);

#test s21_memchr_1
	char str[] = "abcdefg";
	void *ptr = s21_memchr(str, 'e', 4);
	ck_assert_ptr_eq(ptr, s21_NULL);

#test s21_memchr_2
	char str[] = "abcdefg";
	void *ptr = s21_memchr(str, 'f', 10);
	ck_assert_ptr_eq(ptr, str + 5);

#test s21_memchr_3
	char str[] = "12345 678";
	void *ptr = s21_memchr(str, ' ', 9);
	ck_assert_ptr_eq(ptr, str + 5);

#test s21_memchr_4
	char str[] = "12345 678";
	void *ptr = s21_memchr(str, '1', 5);
	ck_assert_ptr_eq(ptr, str);

#test s21_memcpy_0
	char str[] = "abcdef";
	char str2[6];
	s21_memcpy(str2, str, 6);
	ck_assert_mem_eq(str, str2, 6);

#test s21_memcpy_1
	char str[] = "abcdef";
	char str2[2];
	s21_memcpy(str2, str, 2);
	ck_assert_mem_eq(str, str2, 2);

#test s21_memcpy_2
	char str[] = "abcdef";
	char str2[] = "12";
	char str3[] = "12";
	s21_memcpy(str2, str, 0);
	ck_assert_str_eq(str2, str3);

#test s21_strncmp_0
	int n = 5;
	char str1[] = "1234567";
	char str2[] = "1234567";
	ck_assert_uint_eq(s21_strncmp(str1,str2,n), strncmp(str1,str2,n));


#test s21_strncmp_1
	int n = 5;
	char str1[] = "123555";
	char str2[] = "1234567";
	ck_assert_uint_eq(s21_strncmp(str1,str2,n), strncmp(str1,str2,n));


// #test s21_strncmp_2
// 	int n = 5;
// 	char str1[] = " ";
// 	char str2[] = "1234567";
// 	ck_assert_uint_eq(s21_strncmp(str1,str2,n), strncmp(str1,str2,n));


// #test s21_strncmp_3
// 	int n = 5;
// 	char str1[] = "";
// 	char str2[] = "1234567";
// 	ck_assert_uint_eq(s21_strncmp(str1,str2,n), strncmp(str1,str2,n));

// #test s21_strncmp_4
// 	int n = 5;
// 	char str1[] = "1234567";
// 	char str2[] = "";
// 	ck_assert_uint_eq(s21_strncmp(str1,str2,n), strncmp(str1,str2,n));


#test s21_strchr_0
	int c = 'r';
	char str1[] = "sdfsdfs ";
	ck_assert_ptr_eq(s21_strchr(str1,c), strchr(str1,c));

#test s21_strchr_1
	int c = 'f';
	char str1[] = "sdfsdfs ";
	ck_assert_ptr_eq(s21_strchr(str1,c), strchr(str1,c));

#test s21_strncpy_0
	char dst_0[32] = "Hello";
	char dst_1[32] = "Hello";
	char srcStr[] = " world";

	ck_assert_mem_eq(s21_strncpy(dst_0, srcStr, 2), strncpy(dst_1, srcStr, 2), 32);


#test sprintf_d0
	char  buffer[20], buffer2[20];
	int   i = 35;
	s21_sprintf(buffer, "   Integer:   % 0d\n", i );
	sprintf(buffer2, "   Integer:   % 0d\n", i );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d0_1
	char  buffer[20], buffer2[20];
	int   i = 35;
	s21_sprintf(buffer, "   Integer:   %0d\n", i );
	sprintf(buffer2, "   Integer:   %0d\n", i );
	ck_assert_str_eq(buffer,buffer2);


#test sprintf_d1_blank
	char  buffer[20], buffer2[20];
	int   i = 35;
	s21_sprintf(buffer, "   Integer:   %d\n", i );
	sprintf(buffer2, "   Integer:   %d\n", i );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d2_minus
	char  buffer[40], buffer2[40];
	int   i = 34;
	s21_sprintf(buffer, "\t   Integer:   %-6d\n", i );
	sprintf(buffer2, "\t   Integer:   %-6d\n", i );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d3_plus
	char  buffer[60], buffer2[60];
	int   i = 35;
	int j= 40;
	s21_sprintf(buffer, "\tInteger:   %+d two %+d and\n", i, j );
	sprintf(buffer2, "\tInteger:   %+d two %+d and\n", i , j);
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d4_negative
	char  buffer[60], buffer2[60];
	int   i = -0;
	int j= -1;
	s21_sprintf(buffer, "\tInteger:   %d two %d and\n", i, j );
	sprintf(buffer2, "\tInteger:   %d two %d and\n", i , j);
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d5_width
	char  buffer[60], buffer2[60];
	int   i = -3;
	int j= -3;
	s21_sprintf(buffer, "\tInteger:   %6d two %6d and\n", i, j );
	sprintf(buffer2, "\tInteger:   %6d two %6d and\n", i , j);
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d6_width_zero
	char  buffer[60], buffer2[60];
	int   i = -3;
	int j= -3;
	s21_sprintf(buffer, "\tInteger:   %06d two %06d and\n", i, j );
	sprintf(buffer2, "\tInteger:   %06d two %06d and\n", i , j);
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d7_space
	char  buffer[60], buffer2[60];
	int   i = 3;
	int j= 3;
	s21_sprintf(buffer, "\tInteger:% d and% d .\n", i, j );
	sprintf(buffer2, "\tInteger:% d and% d .\n", i, j );
	ck_assert_str_eq(buffer,buffer2);


#test sprintf_d8_wide_vs_precision
	char  buffer[60], buffer2[60];
	int   i = 3;
	int j= 3;
	s21_sprintf(buffer, "\tInteger: %8.4d and %4.8d .\n", i, j );
	sprintf(buffer2, "\tInteger: %8.4d and %4.8d .\n", i, j );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d8_precicion_null
	char  buffer[60], buffer2[60];
	int   i = 3;
	int j= 3;
	s21_sprintf(buffer, "\tInteger: %.d and %.0d .\n", i, j );
	sprintf(buffer2, "\tInteger: %.d and %.0d .\n", i, j );
	ck_assert_str_eq(buffer,buffer2);


#test sprintf_d8_h_l
	char  buffer[60], buffer2[60];
	short   i = 3;
	long int j= 3;
	s21_sprintf(buffer, "\tInteger: %hd and %ld .\n", i, j );
	sprintf(buffer2, "\tInteger: %hd and %ld .\n", i, j );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_d8_width_minus
	char  buffer[40], buffer2[40];
	int   i = 34;
	s21_sprintf(buffer, "\t   Integer:   %-6d\n", i );
	sprintf(buffer2, "\t   Integer:   %-6d\n", i );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_c1_blank
	char  buffer[20], buffer2[20], c = 'l';
	s21_sprintf(buffer, "   Character: %c\n", c ); 
	sprintf(buffer2, "   Character: %c\n", c ); 
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_c2_width
	char  buffer[20], buffer2[20], c = 'l';
	s21_sprintf(buffer, "   Character: %4c\n", c ); 
	sprintf(buffer2, "   Character: %4c\n", c ); 
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_c3_minus
	char  buffer[20], buffer2[20], c = 'l';
	s21_sprintf(buffer, "   Character: %-4c\n", c ); 
	sprintf(buffer2, "   Character: %-4c\n", c ); 
	ck_assert_str_eq(buffer,buffer2);


#test sprintf_f1_blank
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "   Real:      %f\n";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);


#test sprintf_f2_percision
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%.3f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f2_percision_special
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%.f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f3_pr_star
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%.*f";
	s21_sprintf(buffer, formatStr, 4, fp );
	sprintf(buffer2, formatStr, 4, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f4_pr_star
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%.*f   %.*f";
	s21_sprintf(buffer, formatStr, 4, fp, 2, fp);
	sprintf(buffer2, formatStr, 4, fp, 2, fp);
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f2_percision_negative
	char  buffer[40], buffer2[40];
	float fp = -85.732053;
	const char formatStr[] = "   Real:      %.3f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f2_percision_width
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "   Real:      %5.3f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f2_percision_width_zero
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%05.3f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f2_percision_width_align
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%-10.3f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f2_percision_width_zero_sign
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%+010.3f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f2_percision_width_sign_zero
	char  buffer[40], buffer2[40];
	float fp = 85.732053;
	const char formatStr[] = "%+5.5f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f3_percision_width_sign_zero
	char  buffer[40], buffer2[40];
	float fp = -3.22;
	const char formatStr[] = "%+f";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f4_percision_width_sign_zero
	char  buffer[40], buffer2[40];
	float fp = -33.55;
	const char formatStr[] = "%12.3f\n";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_f4_L
	char  buffer[40], buffer2[40];
	long double fp = -33.55;
	const char formatStr[] = "%Lf\n";
	s21_sprintf(buffer, formatStr, fp );
	sprintf(buffer2, formatStr, fp );
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_x1
	char  buffer_0[20], buffer_1[20];
	int a = 0x01ABCD55;
	const char frmt[] = "%x";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x2
	char  buffer_0[20], buffer_1[20];
	int a = 0x01ABCD55;
	const char frmt[] = "%X";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x3
	char  buffer_0[20], buffer_1[20];
	int a = 0x01ABCD55;
	const char frmt[] = "%#X";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x4
	char  buffer_0[20], buffer_1[20];
	unsigned long int a = 0xAABBCCDD00112233;
	const char frmt[] = "%#lX";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x5
	char  buffer_0[20], buffer_1[20];
	unsigned short a = 0xAABB;
	const char frmt[] = "%#hX";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x6
	char  buffer_0[20], buffer_1[20];
	unsigned short a = 0xAABB;
	const char frmt[] = "%#8hX";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x7
	char  buffer_0[20], buffer_1[20];
	unsigned short a = 0xAABB;
	const char frmt[] = "%#-8hX";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x8
	char  buffer_0[20], buffer_1[20];
	unsigned short a = 0xAABB;
	const char frmt[] = "%#08hX";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);

#test sprintf_x9
	char  buffer_0[20], buffer_1[20];
	unsigned short a = 0xAABB;
	const char frmt[] = "%#08hX";
	s21_sprintf(buffer_0, frmt, a);
	sprintf(buffer_1, frmt, a);
	ck_assert_str_eq(buffer_0, buffer_1);	

#test sprintf_s1
	char  buffer[40], buffer2[40],  s[] = "computer";
	s21_sprintf(buffer, "   String:    %s\n", s ); 
	sprintf(buffer2,"   String:    %s\n", s ); 
	ck_assert_str_eq(buffer,buffer2);

#test s21_sprintf_u_0
    unsigned int tesInt = 123567;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%u", tesInt); 
    sprintf(dest_1,"%u", tesInt); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_special
	unsigned int tesInt = 0;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%.u asd %.0u", tesInt,tesInt); 
    sprintf(dest_1,"%.u asd %.0u", tesInt, tesInt); 
    ck_assert_str_eq(dest_0, dest_1);


#test s21_sprintf_u_special_2
	unsigned int tesInt = 2;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%.u asd %.0u", tesInt,tesInt); 
    sprintf(dest_1,"%.u asd %.0u", tesInt, tesInt); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_1
	unsigned int tesInt = 123567;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%8u", tesInt); 
    sprintf(dest_1,"%8u", tesInt); 
    ck_assert_str_eq(dest_0, dest_1);



#test s21_sprintf_u_2
	unsigned int tesInt = 123567;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%08u", tesInt); 
    sprintf(dest_1,"%08u", tesInt); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_4
	unsigned int tesInt = 123567;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%-8u", tesInt); 
    sprintf(dest_1,"%-8u", tesInt); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_5
	unsigned int tesInt = 123567;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%8.5u", tesInt); 
    sprintf(dest_1,"%8.5u", tesInt); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_7
	long unsigned int tesInt = 123567;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%lu", tesInt); 
    sprintf(dest_1,"%lu", tesInt); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_8
	unsigned int tesInt_1 = -1;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%u", tesInt_1); 
    sprintf(dest_1,"%u", tesInt_1); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_9
	unsigned int tesInt_1 = -1;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%8u", tesInt_1); 
    sprintf(dest_1,"%8u", tesInt_1); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_10
	unsigned int tesInt_1 = -1;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%08u", tesInt_1); 
    sprintf(dest_1,"%08u", tesInt_1); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_12
	unsigned int tesInt_1 = -1;
    char dest_0[20];
    char dest_1[20];

    s21_sprintf(dest_0,"%-8u", tesInt_1); 
    sprintf(dest_1,"%-8u", tesInt_1); 
    ck_assert_str_eq(dest_0, dest_1);
	
#test s21_sprintf_u_13
	unsigned int tesInt_1 = -1;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%8.2u", tesInt_1); 
    sprintf(dest_1,"%8.2u", tesInt_1); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_14
	unsigned int tesInt_1 = -1;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%-.2u", tesInt_1); 
    sprintf(dest_1,"%-.2u", tesInt_1); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_15
	unsigned int tesInt_2 = 0;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%-u", tesInt_2);
    sprintf(dest_1,"%-u", tesInt_2); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_16
	unsigned int tesInt_2 = 0;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%u", tesInt_2); 
    sprintf(dest_1,"%u", tesInt_2); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_17
	unsigned int tesInt_2 = 0;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%.ua", tesInt_2); 
    sprintf(dest_1,"%.ua", tesInt_2); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_18
	unsigned int tesInt_2 = 0;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%-8.2u", tesInt_2); 
    sprintf(dest_1,"%-8.2u", tesInt_2); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_19
	unsigned int tesInt_2 = 0;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%-.2u", tesInt_2); 
    sprintf(dest_1,"%-.2u", tesInt_2); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_20
	short int tesInt_3 = 400;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%hu", tesInt_3); 
    sprintf(dest_1,"%hu", tesInt_3); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_u_21
	 int tesInt_3 = 400;
    char dest_0[20];
    char dest_1[20];

	s21_sprintf(dest_0,"%u", tesInt_3); 
    sprintf(dest_1,"%u", tesInt_3); 
    ck_assert_str_eq(dest_0, dest_1);

#test s21_sprintf_c_0
	char testInt = '1';
    char dest_0[20];
    char dest_1[20];
 
	int tests = sprintf(dest_0,"%c", testInt); 
    int s21_tests = s21_sprintf(dest_1,"%c", testInt); 
    ck_assert_int_eq(s21_tests, tests);

#test s21_sprintf_c_1
	char dest_0[20];
	char dest_1[20];
  	char testInt = 'h';
  	sprintf(dest_0, "%c", testInt); 
  	s21_sprintf(dest_1, "%c", testInt); 
  	ck_assert_str_eq(dest_0, dest_1);

#test sprintf_c2_blank
	char  buffer[20], buffer2[20], c = 'l';
	s21_sprintf(buffer, "   Character: %c\n", c ); 
	sprintf(buffer2, "   Character: %c\n", c ); 
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_c3_width
	char  buffer[20], buffer2[20], c = 'l';
	s21_sprintf(buffer, "   Character: %4c\n", c ); 
	sprintf(buffer2, "   Character: %4c\n", c ); 
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_c4_minus
	char  buffer[20], buffer2[20], c = 'l';
	s21_sprintf(buffer, "   Character: %-4c\n", c ); 
	sprintf(buffer2, "   Character: %-4c\n", c ); 
	ck_assert_str_eq(buffer,buffer2);

#test s21_sprintf_s_0
	char testInt[] = "1265473";
    char dest_0[20] = "\0";
    char dest_1[20] = "\0";
 
	int tests = sprintf(dest_0,"%s", testInt); 
    int s21_tests = s21_sprintf(dest_1,"%s", testInt); 
    ck_assert_int_eq(s21_tests, tests);

#test s21_sprintf_s_1
	char dest_0[60] = "\0";
	char dest_1[60] = "\0";
  	char testInt[] = "hello";
  	sprintf(dest_0, "%s", testInt); 
  	s21_sprintf(dest_1, "%s", testInt); 
  	ck_assert_str_eq(dest_0, dest_1);

#test sprintf_s_blank
	char  buffer[60], buffer2[60], c[] = "Hello";
	s21_sprintf(buffer, "   Character: %s\n", c ); 
	sprintf(buffer2, "   Character: %s\n", c ); 
	ck_assert_str_eq(buffer,buffer2);

#test sprintf_s3_width
 	char  buffer[1000], buffer2[1000], c[] = "Hello";
 	s21_sprintf(buffer, "   Character: %40.20s\n", c ); 
 	sprintf(buffer2, "   Character: %40.20s\n", c ); 
 	ck_assert_str_eq(buffer,buffer2);

#test sprintf_s4_minus
	char  buffer[1000], buffer2[1000], c[] = "Hello";
	s21_sprintf(buffer, "   Character: %-40.20s\n", c ); 
	sprintf(buffer2, "   Character: %-40.20s\n", c ); 
	ck_assert_str_eq(buffer,buffer2);

  #test s21_sprintf_e_1
double value = 12e12;
char str1[400];
char str2[400];
char *format = ">>%e !! %.2e %2.2e %5.5e %05.5e %-+0 20.5e %-20.10e";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_e_2
double value = -12e12;
char str1[400];
char str2[400];
char *format = ">>%e !! %.2e %2.2e %5.5e %05.5e %-+0 20.5e %-20.10e";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_e_3
double value = -12e00;
char str1[400];
char str2[400];
char *format = ">>%e !! %.2e %2.2e %5.5e %05.5e %-+0 20.5e %-20.10e";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_e_4
double value = 12e200;
char str1[400];
char str2[400];
char *format = ">>%e !! %.2e %2.2e %5.5e %05.5e %-+0 20.5e %-20.10e";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_e_5
double value = 12e-200;
char str1[400];
char str2[400];
char *format = ">>%e !! %.2e %2.2e %5.5e %05.5e %-+0 20.5e %-20.10e";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_e_6
double value = -112e-200;
char str1[400];
char str2[400];
char *format = ">>%e !! %.2e %2.2e %5.5e %05.5e %-+0 20.5e %-20.10e";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_g_0
double value = -12e20;
char str1[400];
char str2[400];
char *format = ">>%g !! %.2g %2.2g %5.5g %05.5g %-+0 20.5g %-20.10g";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_g_1
double value = -12e20;
char str1[400];
char str2[400];
char *format = ">>%g !! %.2g %2.2g %5.5g %05.5g %-+0 20.5g %-20.10g";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_g_2
double value = -12e-20;
char str1[400];
char str2[400];
char *format = ">>%g !! %.2g %2.2g %5.5g %05.5g %-+0 20.5g %-20.10g";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);

#test s21_sprintf_g_3
double value = 12e-20;
char str1[400];
char str2[400];
char *format = ">>%g !! %.2g %2.2g %5.5g %05.5g %-+0 20.5g %-20.10g";
int a = sprintf(str1, format, value,value,value,value,value,value,value);
int b = s21_sprintf(str2, format, value,value,value,value,value,value,value);
ck_assert_pstr_eq(str1, str2);
ck_assert_int_eq(a,b);




#test to_upper_n1
	char buf[] = "hello";
	char *result =  s21_to_upper(buf);
	if(result){
	ck_assert_str_eq(result, "HELLO");
	free(result);}

#test to_upper_n2
	char buf[] = "HELLO WORLD, 2141235324534";
	char *result =s21_to_upper(buf);
	if(result){
	ck_assert_str_eq(result, "HELLO WORLD, 2141235324534");
	free(result);}

#test to_upper_n4
	char buf[] = "";
	char *str = s21_to_upper(buf);
	if (str){
	ck_assert_str_eq(str, "");
	free(str);}

#test to_upper_n5
	char *result = s21_to_upper(NULL);
	ck_assert_ptr_null(result);
	free(result);	

#test to_lower_n1
	char buf[] = "HELLO sd AA";
	char *str = s21_to_lower(buf);
	if (str){
	ck_assert_str_eq(str, "hello sd aa");
	free(str);}

#test to_lower_n2
	char buf[] = "hello, 2141235324534";
	char *result = s21_to_lower(buf);
	if (result){
	ck_assert_str_eq(result, "hello, 2141235324534");
	free(result);}

#test to_lower_n4
	char buf[] = "";
	char *result = s21_to_lower(buf);
	if(result){ 
	ck_assert_str_eq(result, "");
	free(result);}

#test to_lower_n5
	char *result = s21_to_lower(NULL);
	ck_assert_ptr_null(result);
	free(result);

#test insert_n1
	char buf[] = "aaabbbb";
	char str[] = "qq";
	char *res = s21_insert(buf, str, 0);
	ck_assert_str_eq(res, "qqaaabbbb");
	free(res);

#test insert_n2
	char buf[] = "aaabbbb";
	char str[] = "qq";
	char *res = s21_insert(buf, str, 7);
	ck_assert_str_eq(res, "aaabbbbqq");
	free(res);

#test insert_n3
	char buf[] = "11223344";
	char str[] = "55";
	char *res = s21_insert(buf, str, 2);
	ck_assert_str_eq(res, "1155223344");
	free(res);

#test insert_n4
	char buf[] = "";
	char str[] = "qq";
	char *res = s21_insert(buf, str, 1);
	ck_assert_ptr_null(res);
	free(res);

#test insert_n5
	char str[] = "qq";
	char *res = s21_insert(s21_NULL, str, 1);
	ck_assert_ptr_null(res);
	free(res);

#test trim_n1
	char src[] = "1231as123123";
	char *res = s21_trim(src, "1234567890");
	ck_assert_str_eq(res, "as");
	free(res);

#test trim_n2
	char src[] = "1231as123s123";
	char *res = s21_trim(src, "1234567890");
	ck_assert_str_eq(res, "as123s");
	free(res);

#test trim_n3
	char src[] = "abcd";
	char *res = s21_trim(src, "1234567890");
	ck_assert_str_eq(res, "abcd");
	free(res);

#test trim_n4
	char *res = s21_trim(s21_NULL, "1234567890");
	ck_assert_ptr_null(res);
	free(res);

#test trim_n5
	char src[] = "";
	char *res = s21_trim(src, "1234567890");
	ck_assert_str_eq(res, "");
	free(res);

#test trim_n6
	char src[] = "  ssds  ";
	char *res = s21_trim(src, NULL);
	ck_assert_str_eq(res, "  ssds  ");
	free(res);

#test sprintf_percent
	char  buffer[60], buffer2[60];
	s21_sprintf(buffer, "%%\n" ); 
 	sprintf(buffer2, "%%\n" ); 
 	ck_assert_str_eq(buffer,buffer2);

#test test_s21_sscanf_read_int_1
    int s21_a=0;

  int sys_a=0;
  
  int sys_count=0;
  int s21_count=0;
s21_count = s21_sscanf("25","%d",&s21_a);
sys_count = sscanf("25","%d",&sys_a);
ck_assert_int_eq(s21_a,sys_a);
ck_assert_int_eq(s21_count,sys_count);

#test test_s21_sscanf_read_int
  int s21_a=0;
  int s21_b=0;
  int sys_a=0;
  int sys_b=0;
  int sys_count=0;
  int s21_count=0;
s21_count = s21_sscanf("-0012:+1500","%d:%d",&s21_a,&s21_b);
sys_count = sscanf("-0012:+1500","%d:%d",&sys_a,&sys_b);
ck_assert_int_eq(s21_a,sys_a);
ck_assert_int_eq(s21_b,sys_b);
ck_assert_int_eq(s21_count,sys_count);

#test test_s21_sscanf_read_char
  char sys_ch1 = 0;
  char sys_ch2 = 0;
  char sys_ch3 = 0;
  char s21_ch1 = 0;
  char s21_ch2 = 0;
  char s21_ch3 = 0;
  int sys_count=0;
  int s21_count=0;
  s21_count = s21_sscanf("!de             #&", "%cde %c%cre", &s21_ch1, &s21_ch2, &s21_ch3);
  sys_count = sscanf("!de             #&", "%cde %c%cre", &sys_ch1, &sys_ch2, &sys_ch3);
  ck_assert_int_eq(s21_count,sys_count);
  ck_assert_int_eq(s21_ch1,sys_ch1);
  ck_assert_int_eq(s21_ch2,sys_ch2);
  ck_assert_int_eq(s21_ch3,sys_ch3);

#test test_s21_sscanf_float_1
float f1=0,f2=0,f3=0,f4=0,f5=0,f6=0;
int sys_count=0;
int s21_count=0;
sys_count = sscanf("-12.34\t 1.778e-10 \n nan","%f%f%6f",&f1,&f2,&f3);
s21_count = s21_sscanf("-12.34\t 1.778e-10 \n nan","%f%f%6f",&f4,&f5,&f6);
ck_assert_float_eq(f1,f4);
ck_assert_float_eq(f2,f5);
ck_assert_float_nan(f3);
ck_assert_float_nan(f6);
ck_assert_int_eq(s21_count,sys_count);

#test test_s21_sscanf_Gg_2
float f1=0,f2=0,f3=0,f4=0,f5=0,f6=0;
int sys_count=0;
int s21_count=0;
sys_count = sscanf("-12.34\t 1.778e-10 \n nan","%g%g%6g",&f1,&f2,&f3);
s21_count = s21_sscanf("-12.34\t 1.778e-10 \n nan","%g%g%6g",&f4,&f5,&f6);
ck_assert_float_eq(f1,f4);
ck_assert_float_eq(f2,f5);
ck_assert_float_nan(f3);
ck_assert_float_nan(f6);
ck_assert_int_eq(s21_count,sys_count);

#test test_s21_sscanf_Ee_2
float f1=0,f2=0,f3=0,f4=0,f5=0,f6=0;
int sys_count=0;
int s21_count=0;
sys_count = sscanf("-12.34\t 1.778e-10 \n nan","%e%e%6e",&f1,&f2,&f3);
s21_count = s21_sscanf("-12.34\t 1.778e-10 \n nan","%e%e%6e",&f4,&f5,&f6);
ck_assert_float_eq(f1,f4);
ck_assert_float_eq(f2,f5);
ck_assert_float_nan(f3);
ck_assert_float_nan(f6);
ck_assert_int_eq(s21_count,sys_count);

#test test_s21_sscanf_read_i
  int s21_a=0;
  int s21_b=0;
  int s21_c=0;
  int sys_a=0;
  int sys_b=0;
  int sys_c=0;
  int sys_count=0;
  int s21_count=0;
s21_count = s21_sscanf("-0012 1500 0x123","%i%i%i",&s21_a,&s21_b,&s21_c);
sys_count = sscanf("-0012 1500 0x123","%i%i%i",&sys_a,&sys_b,&sys_c);
ck_assert_int_eq(s21_a,sys_a);
ck_assert_int_eq(s21_b,sys_b);
ck_assert_int_eq(s21_c,sys_c);
ck_assert_int_eq(s21_count,sys_count);


#test test_s21_sscanf_error_read_sc
int i=0,i2=0;
char a[40] = {'\0'}, c[40] = {'\0'}, d[40] = {'\0'};
wchar_t b[40] = {'\0'};
char a2[40] = {'\0'}, c2[40] = {'\0'}, d2[40] = {'\0'};
wchar_t b2[40] = {'\0'};
int sys_count=0;
int s21_count=0;
const char str[] = "School 21 need food for students !!!";
sys_count = sscanf(str, "%s %ls %3d %5c %*s %*3s %s", a, b,&i, c, d);
s21_count= s21_sscanf(str, "%s %ls %3d %5c %*s %*3s %s", a2, b2,&i2,c2, d2);
ck_assert_str_eq(a, a2);
//ck_assert_str_eq(b, b2);
ck_assert_int_eq(i, i2);
//ck_assert_str_eq(c, c2);
//ck_assert_str_eq(d, d2);
ck_assert_int_eq(s21_count,sys_count);

#test test_s21_sscanf_d
int a=1, a1=1;
short b=1, b1=1;
long c=1, c1=1, d=1, d1=1, e=1, e1=1;
int sys_count=0;
int s21_count=0;
const char str[] = "-77777 777777777 -7777 888888777";
sys_count=sscanf(str, "%3d %hd %ld %*d %ld %2ld", &a, &b, &c, &d, &e);
s21_count=s21_sscanf(str, "%3d %hd %ld %*d %ld %2ld", &a1, &b1,
                                   &c1, &d1, &e1);
ck_assert_int_eq(sys_count, s21_count);
ck_assert_int_eq(a, a1);
ck_assert_int_eq(b, b1);
ck_assert_int_eq(c, c1);
ck_assert_int_eq(d, d1);
ck_assert_int_eq(e, e1);

#test test_s21_sscanf_n
int a1=1, a2=1;
short b1=1, b2=1;
signed char c1=1, c2=1;
long int  e1=1, e2=1;
long long int d1=1, d2=1;
int sys_count=0;
int s21_count=0;
char *format="%*s %*2s %n %*d %hn %*d %hhn %ln %lln";
const char str[] = "-77777 777777777 -7777 888888777";
sys_count=sscanf(str, format, &a1, &b1, &c1, &d1, &e1);
s21_count=s21_sscanf(str, format, &a2, &b2,&c2, &d2, &e2);
ck_assert_int_eq(sys_count, s21_count);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);
ck_assert_int_eq(e1, e2);
#test test_s21_sscanf_error_d
int a=1, a1=1;
short b=1, b1=1;
long c=1, c1=1, d=1, d1=1, e=1, e1=1;
int sys_count=0;
int s21_count=0;
const char str[] = "-77777 777777777 --7777 888888777";
sys_count=sscanf(str, "%3d %hd %ld %*d %ld %2ld", &a, &b, &c, &d, &e);
s21_count=s21_sscanf(str, "%3d %hd %ld %*d %ld %2ld", &a1, &b1,
                                   &c1, &d1, &e1);
ck_assert_int_eq(sys_count, s21_count);
ck_assert_int_eq(a, a1);
ck_assert_int_eq(b, b1);
ck_assert_int_eq(c, c1);
ck_assert_int_eq(d, d1);
ck_assert_int_eq(e, e1);

#test test_s21_sscanf_s_and_c
char a[40] = {'\0'}, c[40] = {'\0'}, d[40] = {'\0'};
wchar_t b[40] = {'\0'};
char a2[40] = {'\0'}, c2[40] = {'\0'}, d2[40] = {'\0'};
wchar_t b2[40] = {'\0'};
const char str[] = "now big tests for big problems";
ck_assert_int_eq(sscanf(str, "%s %ls %3c %*s %s", a, b, c, d),
                 s21_sscanf(str, "%s %ls %3c %*s %s", a2, b2, c2, d2));
ck_assert_str_eq(a, a2);
ck_assert_str_eq(c, c2);
ck_assert_str_eq(d, d2);

#test test_s21_sscanf_x
int a1, b1, c1, d1, a2, b2, c2, d2, e1, e2;
a1 = a2 = b1 = b2 = c1 = c2 = d1 = d2 = e1 = e2 = 1;
const char str[] = "4242 0042 0x42AB -99 -0x42ad";
int sys_count = sscanf(str, "%x%x%x%x%x", &a1, &b1, &c1, &d1, &e1);
int s21_count = s21_sscanf(str, "%x%x%x%x%x", &a2, &b2, &c2, &d2, &e2);
ck_assert_int_eq(sys_count, s21_count);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);
ck_assert_int_eq(e1, e2);

#test test_s21_sscanf_error_x
int a1, b1, c1, d1, a2, b2, c2, d2, e1, e2;
a1 = a2 = b1 = b2 = c1 = c2 = d1 = d2 = e1 = e2 = 1;
const char str[] = "4242 0042 0x42GG -99 -0x42ad";
int sys_count = sscanf(str, "%x%x%x%x%x", &a1, &b1, &c1, &d1, &e1);
int s21_count = s21_sscanf(str, "%x%x%x%x%x", &a2, &b2, &c2, &d2, &e2);
ck_assert_int_eq(sys_count, s21_count);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);


#test test_s21_sscanf_i
int a1, b1, c1, d1, a2, b2, c2, d2;
a1 = a2 = b1 = b2 = c1 = c2 = d1 = d2 = 1;
const char str[] = "0x11 098 98 -0998";
int r1 = sscanf(str, "%i%i%i%i", &a1, &b1, &c1, &d1);
int r2 = s21_sscanf(str, "%i%i%i%i", &a2, &b2, &c2, &d2);
ck_assert_int_eq(r1, r2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);

#test test_s21_sscanf_o
int a1, b1, c1, d1, a2, b2, c2, d2;
a1 = a2 = b1 = b2 = c1 = c2 = d1 = d2 = 1;
const char str[] = "0143 2342 -42 777";
int r1 = sscanf(str, "%o%o%o%o", &a1, &b1, &c1, &d1);
int r2 = s21_sscanf(str, "%o%o%o%o", &a2, &b2, &c2, &d2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);
ck_assert_int_eq(r1, r2);

#test test_s21_sscanf_p
int integer = 45;
int *p1a = &integer;
int *p2a;
int *p3a;
char temp[50] = {'\0'};
sprintf(temp, "%p", p1a);
sscanf(temp, "%p", &p2a);
s21_sscanf(temp, "%p", &p3a);
ck_assert_ptr_eq(p2a, p3a);
//ck_assert_int_eq(*p2a, *p3a);

#test test_s21_sscanf_n_and_percent
int a1, b1, c1, d1, a2, b2, c2, d2;
a1 = a2 = b1 = b2 = c1 = c2 = d1 = d2 = 1;
const char str[] = "-12345%    -000456000    111    0005 pisos";
int r1 = s21_sscanf(str, "%d%% %d %n %d", &a1, &b1, &c1, &d1);
int r2 = sscanf(str, "%d%% %d %n %d", &a2, &b2, &c2, &d2);
ck_assert_int_eq(r1, r2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);


#test test_s21_sscanf_f_and_e
float a1, b1, a2, b2;
double c1, c2;
long double d1, d2;
a1 = a2 = b1 = b2 = c1 = c2 = d1 = d2 = 1.1;
const char str[] = "-12345.445 12.34e+07 -0.0 1234e-07 pisos";
s21_sscanf(str, "%f%f%lf%Lf", &a1, &b1, &c1, &d1);
sscanf(str, "%f%f%lf%Lf", &a2, &b2, &c2, &d2);
ck_assert_float_eq(a1, a2);
ck_assert_float_eq(b1, b2);
ck_assert_float_eq(c1, c2);
ck_assert_float_eq(d1, d2);

#test test_s21_sscanf_u
unsigned int a1, b1, a2, b2;
unsigned short c1, c2;
unsigned long d1, d2;
a1 = a2 = b1 = b2 = c1 = c2 = d1 = d2 = 1;
const char str[] = "0 0002 -1 -1234 666 pisos";
int r1 = sscanf(str, "%*u%u%u%hu%lu", &a1, &b1, &c1, &d1);
int r2 = s21_sscanf(str, "%*u%u%u%hu%lu", &a2, &b2, &c2, &d2);
ck_assert_int_eq(r1, r2);
ck_assert_int_eq(a1, a2);
ck_assert_int_eq(b1, b2);
ck_assert_int_eq(c1, c2);
ck_assert_int_eq(d1, d2);
